{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\List.svelte",
    "..\\src\\Map.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import Map from \"./Map.svelte\";\r\n  import List from \"./List.svelte\";\r\n  import Geocoder from \"./Geocoder\";\r\n  export let name;\r\n  export let values = [];\r\n  export let selectedCrime = false;\r\n\r\n  const getSize = date => {\r\n    let difference = Math.abs(new Date() - new Date(date));\r\n    let retSize = 10;\r\n    if (difference < 3600000) {\r\n      // 1 hour\r\n      retSize = 30;\r\n    } else if (difference < 7200000) {\r\n      // 2 hours\r\n      retSize = 20;\r\n    }\r\n\r\n    return retSize;\r\n  };\r\n\r\n  const querySelectorAllFunction = (query, context) => {\r\n    return Array.prototype.slice.call(context.querySelectorAll(query));\r\n  };\r\n\r\n  const getCrimes = async () => {\r\n    const response = await fetch(\r\n      \"https://jsonp.afeld.me?url=http://www.slmpd.org/cfs.aspx\"\r\n    );\r\n    const text = await response.text();\r\n\r\n    // Parse the result from the request into a DOM document so we can parse through it and turn it into JSON\r\n    var doc = new DOMParser().parseFromString(text, \"text/html\");\r\n\r\n    const rows = querySelectorAllFunction(\"table tbody tr\", doc);\r\n    const values = Promise.all(\r\n      rows.map(async row => {\r\n        const [date, id, address, offense] = querySelectorAllFunction(\r\n          \"td\",\r\n          row\r\n        ).map(cell => {\r\n          // console.log(\"returning\", cell.querySelector(\"font\").innerHTML);\r\n          return cell.querySelector(\"font\").innerHTML;\r\n        });\r\n\r\n        const fullAddress =\r\n          address.replace(\"XX \", \"00 \").replace(\" / \", \" and \") +\r\n          \", St. Louis, MO, USA\";\r\n\r\n        const location = await Geocoder(fullAddress);\r\n        // console.log(\"location:\", location);\r\n        let lat = false;\r\n        let lon = false;\r\n        if (location.locations.length > 0) {\r\n          if (location.locations[0].feature.attributes.Score > 90.0) {\r\n            lat = location.locations[0].feature.geometry.y;\r\n            lon = location.locations[0].feature.geometry.x;\r\n          }\r\n        }\r\n\r\n        return {\r\n          date: date,\r\n          id: id,\r\n          address: fullAddress,\r\n          offense: offense,\r\n          size: getSize(date),\r\n          lat: lat,\r\n          lon: lon\r\n        };\r\n      })\r\n    );\r\n\r\n    // const location = await Geocoder(values.address);\r\n    // console.log('location', location);\r\n    return values;\r\n  };\r\n\r\n  onMount(async function() {\r\n    values = await getCrimes();\r\n\r\n    // setInterval(async () => {\r\n    //   values = await getCrimes();\r\n    // }, 500000);\r\n  });\r\n\r\n  function listClickHandler(evt) {\r\n    if (selectedCrime == evt.detail || evt.detail === false) {\r\n      selectedCrime = false; // toggle\r\n    } else {\r\n      selectedCrime = evt.detail;\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  header {\r\n    grid-column: 1 / span 5;\r\n    font-size: 40px;\r\n    padding: 10px;\r\n    overflow: hidden;\r\n  }\r\n\r\n  aside {\r\n    grid-column: span 2;\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  @media (max-width: 700px) {\r\n    aside {\r\n      grid-column: 1 / span 5;\r\n    }\r\n  }\r\n</style>\r\n\r\n<header>\r\n  {name}\r\n</header>\r\n<Map crimes={values} {selectedCrime} on:selected={listClickHandler} />\r\n<aside id=\"sidebar\">\r\n  <List {values} {selectedCrime} on:click={listClickHandler} />\r\n</aside>\r\n",
    "<script>\r\n  export let values;\r\n  export let selectedCrime;\r\n  import { createEventDispatcher } from 'svelte';\r\n\r\n  const dispatch  = createEventDispatcher();\r\n\r\n  function handleClick(evt) {\r\n    dispatch('click', evt);\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .card {\r\n    margin-bottom: 20px;\r\n    cursor: pointer;\r\n  }\r\n  .card.highlight {\r\n    font-weight: bold;\r\n  }\r\n</style>\r\n\r\n{#each values as crime}\r\n  <div class=\"card\" class:highlight={selectedCrime && crime.id === selectedCrime.id} on:click={() => handleClick(crime)} >\r\n    {crime.offense}\r\n    <br />\r\n    {crime.date}\r\n    <br />\r\n    {crime.address}\r\n  </div>\r\n{/each}",
    "<script>\r\n  export let selectedCrime = \"\";\r\n  export let crimes = \"\";\r\n  import { createEventDispatcher } from 'svelte';\r\n\r\n  const dispatch  = createEventDispatcher();\r\n\r\n  let map;\r\n  let view;\r\n  let graphicsLayer;\r\n\r\n  import { loadModules } from \"esri-loader\";\r\n  loadModules(\r\n    [\r\n      \"esri/Map\",\r\n      \"esri/views/MapView\",\r\n      \"esri/layers/GraphicsLayer\",\r\n      \"esri/Graphic\",\r\n      \"esri/geometry/Point\"\r\n    ],\r\n    {\r\n      css: true\r\n    }\r\n  )\r\n    .then(([Map, MapView, GraphicsLayer, Graphic, Point]) => {\r\n      // then we load a web map from an id\r\n      map = new Map({\r\n        basemap: \"streets\"\r\n      });\r\n      view = new MapView({\r\n        container: \"viewDiv\",\r\n        map: map,\r\n        zoom: 12,\r\n        center: [-90.28, 38.6] // longitude, latitude\r\n      });\r\n      graphicsLayer = new GraphicsLayer();\r\n      map.add(graphicsLayer);\r\n\r\n      view.watch('popup.visible', (evt) => {\r\n        // console.log('popup.visible', evt);\r\n        if(evt === false) {\r\n          dispatch('selected', false);\r\n        }\r\n      });\r\n\r\n      view.on(\"click\", function (event) {\r\n        // Search for graphics at the clicked location. View events can be used\r\n        // as screen locations as they expose an x,y coordinate that conforms\r\n        // to the ScreenPoint definition.\r\n        view.hitTest(event).then(function (response) {\r\n          if (response.results.length) {\r\n            var graphic = response.results.filter(function (result) {\r\n              // check if the graphic belongs to the layer of interest\r\n              return result.graphic.layer === graphicsLayer;\r\n            })[0].graphic;\r\n\r\n            // do something with the result graphic\r\n            dispatch('selected', graphic.attributes);\r\n          } else {\r\n            dispatch('selected', false);\r\n          }\r\n        });\r\n      });\r\n    })\r\n    .catch(err => {\r\n      // handle any errors\r\n      console.error(err);\r\n    });\r\n\r\n  $: if (view && selectedCrime !== \"\") {\r\n    if (selectedCrime === false) {\r\n      view.popup.visible = false;\r\n    } else {\r\n      view.center = [selectedCrime.lon, selectedCrime.lat];\r\n      const feature = graphicsLayer.graphics.find(graphic => {\r\n        return graphic.attributes.id === selectedCrime.id;\r\n      });\r\n      view.popup.features = [feature];\r\n      view.popup.location = feature.geometry;\r\n      view.popup.visible = true;\r\n      // view.zoom = 16;\r\n    }\r\n  }\r\n\r\n  $: if (crimes && crimes.length > 0) {\r\n    loadModules(\r\n      [\"esri/layers/GraphicsLayer\", \"esri/Graphic\", \"esri/geometry/Point\"],\r\n      {\r\n        css: true\r\n      }\r\n    ).then(([GraphicsLayer, Graphic, Point]) => {\r\n      // TESTING ---------------------\r\n\r\n      // const crime = crimes[5];\r\n      // console.log(\"crimes\", crimes);\r\n      let graphics = crimes.map(crimeObject => {\r\n        if (crimeObject.lat && crimeObject.lon) {\r\n          const point = new Point({\r\n            type: \"point\", // autocasts as new Polyline()\r\n            latitude: crimeObject.lat,\r\n            longitude: crimeObject.lon\r\n          });\r\n          const pointSymbol = {\r\n            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n            style: \"circle\",\r\n            color: \"green\",\r\n            size: crimeObject.size + \"px\", // pixels\r\n            outline: {\r\n              // autocasts as new SimpleLineSymbol()\r\n              color: [255, 255, 0],\r\n              width: 3 // points\r\n            }\r\n          };\r\n          const attributes = crimeObject;\r\n\r\n          return new Graphic({\r\n            geometry: point,\r\n            symbol: pointSymbol,\r\n            attributes,\r\n            popupTemplate: {\r\n              title: crimeObject.offense,\r\n              content: \"{date}<br />{address}\"\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      graphicsLayer.removeAll();\r\n      graphicsLayer.addMany(graphics);\r\n    });\r\n  }\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    grid-column: 1 / span 3;\r\n  }\r\n  #viewDiv {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n  @media (max-width: 700px) {\r\n    main {\r\n      grid-column: 1 / span 5;\r\n    }\r\n  }\r\n</style>\r\n\r\n<main>\r\n  <div id=\"viewDiv\" />\r\n</main>\r\n"
  ],
  "names": [],
  "mappings": "AAiGE,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CACvB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,MAAM,AAClB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,IAAI,CAAC,CAAC,CACnB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACzB,CAAC,AACH,CAAC;ACpGD,KAAK,cAAC,CAAC,AACL,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,KAAK,UAAU,cAAC,CAAC,AACf,WAAW,CAAE,IAAI,AACnB,CAAC;ACmHD,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACzB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACzB,CAAC,AACH,CAAC"
}