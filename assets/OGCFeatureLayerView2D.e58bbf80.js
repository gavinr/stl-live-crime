import{as as e,at as a,au as i,K as r}from"./vendor.0f6f771b.js";import{Z as s}from"./FeatureLayerView2D.43bf8575.js";import"./clickToleranceUtils.bcc7d4ae.js";import"./definitions.8ca8ae21.js";import"./LayerView.daf0479f.js";import"./Container.c8eaa527.js";import"./mat4f32.9c1247c6.js";import"./schemaUtils.8a8d3ef0.js";import"./Utils.19562db3.js";import"./Texture.e232c600.js";import"./MaterialKey.1b4b84e9.js";import"./visualVariablesUtils.0e33d252.js";import"./CIMSymbolHelper.e451d5ea.js";import"./Rect.96506681.js";import"./BidiEngine.82513d9e.js";import"./MD5.a7f2b001.js";import"./popupUtils.965bbada.js";import"./drapedUtils.39ae2daa.js";const t=s=>{let t=class extends s{initialize(){const{layer:e,view:a}=this;e.source.supportsSpatialReference(a.spatialReference)||this.addResolvingPromise(Promise.reject(new r("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:e})))}get availableFields(){return this.layer.fieldsIndex.fields.map((e=>e.name))}};return e([a()],t.prototype,"layer",void 0),e([a({readOnly:!0})],t.prototype,"availableFields",null),t=e([i("esri.views.layers.OGCFeatureLayerView")],t),t};let l=class extends(t(s)){};l=e([i("esri.views.2d.layers.OGCFeatureLayerView2D")],l);var o=l;export{o as default};
