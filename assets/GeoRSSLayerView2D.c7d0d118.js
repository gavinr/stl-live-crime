import{dK as e,cD as i,j as s,dS as t,dT as r,ad as a,cc as o,as as p,au as l}from"./vendor.0f6f771b.js";import{l as n,d as h}from"./LayerView.daf0479f.js";import{i as m}from"./GraphicContainer.6b37a1b7.js";import{o as c}from"./BaseGraphicContainer.b69eec87.js";import"./Container.c8eaa527.js";import"./mat4f32.9c1247c6.js";import"./Utils.19562db3.js";import"./Texture.e232c600.js";import"./quantizationUtils.0ee2d49e.js";import"./json.df9e51f4.js";import"./Matcher.e2737c95.js";import"./definitions.8ca8ae21.js";import"./TileStore.473da3ff.js";import"./FeatureSetReader.977fb473.js";import"./centroid.f7592ee4.js";import"./visualVariablesUtils.20375a00.js";import"./visualVariablesUtils.0e33d252.js";import"./quickselect.c0fda8e0.js";import"./tileUtils.08fd5a8f.js";import"./schemaUtils.8a8d3ef0.js";import"./MaterialKey.1b4b84e9.js";import"./CIMSymbolHelper.e451d5ea.js";import"./Rect.96506681.js";import"./BidiEngine.82513d9e.js";import"./MD5.a7f2b001.js";import"./GeometryUtils.c1792d3b.js";import"./earcut.b5c0cad1.js";import"./TileClipper.3e47bba4.js";import"./VertexArrayObject.8589ac11.js";import"./FeatureContainer.b9d3159a.js";import"./TileContainer.6a40f454.js";import"./WGLContainer.7d7ac47e.js";import"./ShaderCompiler.7eab3352.js";import"./config.042ea55e.js";let y=class extends(n(h)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((a=>{const o=e.fromJSON(a.featureSet),p=new(i.ofType(s))(o.features);let l;if(this._graphicsViewMap[o.geometryType])l=this._graphicsViewMap[o.geometryType],l.graphics.addMany(p);else{const e=a.layerDefinition.drawingInfo,i=a.popupInfo?t.fromJSON(a.popupInfo):null,s=r(e.renderer);l=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new m(this.view.featuresTilingScheme)}),this._graphicsViewMap[o.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==o.geometryType||this.layer.polygonSymbol?"polyline"!==o.geometryType||this.layer.lineSymbol?"point"!==o.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([a(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new o({symbol:e})})),a(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new o({symbol:e})})),a(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new o({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var d=y;export{d as default};
