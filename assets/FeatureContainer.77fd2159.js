var t=Object.defineProperty,e=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,o=(e,i,s)=>i in e?t(e,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[i]=s;import{o as n,K as l,A as d,B as h,C as u,D as c,r as p}from"./definitions.8ca8ae21.js";import{r as f,o as b}from"./TileContainer.d9a21bf3.js";import{I as v,F as x,ck as _,G as g,a4 as m,H as y,bT as z,J as w,bt as T,cl as S,cw as V,a6 as D,bj as A,a0 as E,cx as F,an as R,bO as I,cy as O}from"./vendor.982f672a.js";import{t as U}from"./VertexArrayObject.cc6b7ca8.js";import{r as M}from"./Texture.4e30fbdc.js";import{H as j,G as k,N as C,K as P}from"./Utils.c0a073db.js";import{n as B,l as q}from"./visualVariablesUtils.df688d84.js";class L extends f{constructor(t,e){super(t,e,[n,n])}}const Q=v.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),N=B(q,Q),$=t=>2147483647&t;class H{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:a}=t,o=j(r);this.shared=i,this.pixelType=r,this.size=e,this.textureOnly=a,a||(this.data=new o(z(s))),this._resetRange()}destroy(){m(this._texture,(t=>t.dispose()));for(const t in this._fbos)m(this._fbos[t],(e=>{"0"===t&&e.detachColorTexture(),e.dispose()})),this._fbos[t]=null;this._texture=null}get _textureDesc(){return{target:3553,wrapMode:33071,pixelFormat:6408,dataType:this.pixelType,samplingMode:9728,width:this.size,height:this.size}}setData(t,e,i){const s=$(t),r=z(this.data),a=s*this.texelSize+e;!r||a>=r.length||(r[a]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(x(this.data))return null;const i=$(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return D(this._texture,(()=>this._initTexture(t)))}getFBO(t,e=0){if(x(this._fbos[e])){const i={colorTarget:0,depthStencilTarget:0},s=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new U(t,i,s)}return this._fbos[e]}get locked(){return!(5121!==this.pixelType||!this.shared||this.textureOnly||!y("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(t,e){if(!this.locked){try{const e=this.dirtyStart,i=this.dirtyEnd;if(!this.hasDirty)return;this._resetRange();const s=z(this.data).buffer,r=this.getTexture(t),a=4,o=(e-e%this.size)/this.size,n=(i-i%this.size)/this.size,l=o,d=this.size,h=n,u=o*this.size*a,c=(d+h*this.size)*a-u,p=j(this.pixelType),f=new p(s,u*p.BYTES_PER_ELEMENT,c),b=this.size,v=h-l+1;if(v>this.size)return void Q.error(new w("mapview-webgl","Out-of-bounds index when updating AttributeData"));r.updateData(0,0,l,b,v,f)}catch(i){}e()}}update(t){const{data:e,start:i,end:s}=t;if(g(e)){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=j(this.pixelType);this.destroy(),this.data=new s(z(t.buffer))}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new M(t,this._textureDesc,D(this.data,void 0));if(g(this._lastTexture)&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,o=this.getFBO(t),n=k(r),l=new(j(r))(new ArrayBuffer(i*s*n*this.texelSize)),d=t.getBoundFramebufferObject(),{x:h,y:u,width:c,height:p}=t.getViewport();t.bindFramebuffer(o),o.readPixels(0,0,i,s,a,r,l),e.updateData(0,0,0,2*i,s/2,l),t.setViewport(h,u,c,p),t.bindFramebuffer(d)}return this.destroy(),this._texture=e,this._texture}}class Z{constructor(t){this._onUpdate=t,this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}initialize(t){const{blocks:e,shared:i,size:s}=t;if(this.shared=i,this.size=s,N("Initializing AttributeStoreView",t),x(this._data))this._data=_(e,(t=>new H(t,s,i)));else for(let r=0;r<this._data.length;r++){const t=this._data[r],a=e[r];g(a)&&(x(t)?this._data[r]=new H(a,s,i):t.resize(a,s))}this._initialized=!0}destroy(){m(this._data,(t=>_(t,(t=>t.destroy())))),m(this._defaultTexture,(t=>t.dispose()))}isUpdating(){const t=this._data;if(x(t))return!0;const e=g(this._pendingAttributeUpdate),i=e;return y("esri-2d-log-updating")&&console.log(`Updating AttributeStoreView ${i}\n  -> hasPendingUpdate ${e}`),i}getBlock(t){return x(this._data)?null:this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,l,0,0)}getData(t,e,i,s){if(!this._data)return 0;const r=z(this._data)[e];if(x(r))return 0;const a=r.getData(t,i);return g(a)?a:s}setData(t,e,i,s){const r=z(this._data)[e];z(r).setData(t,i,s)}lockTextureUpload(){this._locked=!0}unlockTextureUpload(){this._locked=!1}forceTextureUpload(){this._forceNextUpload=!0}async requestUpdate(t){if(this._pendingAttributeUpdate)return void Q.error(new w("mapview-webgl","Tried to update attribute data with a pending update"));const e=T();return N("AttributeStoreView Update Requested",t),this._pendingAttributeUpdate={data:t,resolver:e},e.promise}update(){if(this._initialized&&g(this._pendingAttributeUpdate)){const{data:t,resolver:e}=this._pendingAttributeUpdate,i=z(this._data);for(let s=0;s<t.blocks.length;s++){const e=t.blocks[s],r=i[s];m(r,(t=>m(e,(e=>{N(`Updating block ${s}`,e),t.update(e)}))))}this._pendingAttributeUpdate=null,e(),this._onUpdate()}}bindTextures(t){this.update();const e=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(e,d),t.bindTexture(e,h),t.bindTexture(e,u),void t.bindTexture(e,c);const i=z(this._data);this._locked&&!this._forceNextUpload||(S(i,(e=>e.updateTexture(t,(()=>this._onUpdate())))),this._forceNextUpload=!1),t.bindTexture(V(i[0],e,(e=>e.getTexture(t))),d),t.bindTexture(V(i[1],e,(e=>e.getTexture(t))),h),t.bindTexture(V(i[2],e,(e=>e.getTexture(t))),u),t.bindTexture(V(i[3],e,(e=>e.getTexture(t))),c)}_getDefaultTexture(t){if(x(this._defaultTexture)){const e={wrapMode:33071,pixelFormat:6408,dataType:5121,samplingMode:9728,width:1,height:1};this._defaultTexture=new M(t,e,new Uint8Array(4))}return this._defaultTexture}}function G(t,e){const i=e.length;if(t<e[0].value||1===i)return e[0].size;for(let s=1;s<i;s++)if(t<e[s].value){const i=(t-e[s-1].value)/(e[s].value-e[s-1].value);return e[s-1].size+i*(e[s].size-e[s-1].size)}return e[i-1].size}function J(t,e,i=0){if(x(e))return t[i+0]=0,t[i+1]=0,t[i+2]=0,void(t[i+3]=0);const{r:s,g:r,b:a,a:o}=e;t[i+0]=s*o/255,t[i+1]=r*o/255,t[i+2]=a*o/255,t[i+3]=o}class K{constructor(){this.symbolLevels=[],this.vvColorValues=new Float32Array(8),this.vvColors=new Float32Array(32),this.vvOpacityValues=new Float32Array(8),this.vvOpacities=new Float32Array(8),this.vvSizeMinMaxValue=new Float32Array(4),this.ddColors=new Float32Array(32),this.ddBackgroundColor=new Float32Array(4),this.ddActiveDots=new Float32Array(8),this._vvMaterialParameters={vvSizeEnabled:!1,vvColorEnabled:!1,vvRotationEnabled:!1,vvRotationType:"geographic",vvOpacityEnabled:!1}}getSizeVVFieldStops(t){const e=this._vvSizeFieldStops;switch(e.type){case"static":return e;case"level-dependent":return D(e.levels[t],(()=>{let i=1/0,s=0;for(const n in e.levels){const e=parseFloat(n),r=Math.abs(t-e);r<i&&(i=r,s=e)}if(i===1/0)return{sizes:new Float32Array([0,0,0,0,0,0]),values:new Float32Array([0,0,0,0,0,0])};const r=2**((t-s)/2),a=z(e.levels[s]),o=new Float32Array(a.values);return o[2]*=r,o[3]*=r,{sizes:z(a.sizes),values:o}}))}}get vvMaterialParameters(){return this._vvMaterialParameters}update(t){g(this._vvInfo)&&this._updateVisualVariables(this._vvInfo.vvRanges,t)}setInfo(t,e,i){switch(g(i)&&i.forEach((t=>this._updateEffects(t))),this._vvInfo=e,t.type){case"dot-density":this._updateDotDensityInfo(t)}}getVariation(){return{ddDotBlending:this.ddDotBlending,outsideLabelsVisible:this.outsideLabelsVisible,oesTextureFloat:A().supportsTextureFloat}}getVariationHash(){return(this.ddDotBlending?1:0)|(this.outsideLabelsVisible?1:0)<<1}_updateEffects(t){g(t)&&t.filter&&t.filter.enabled&&(this.outsideLabelsVisible=t.excludedLabelsVisible)}_updateVisualVariables(t,e){const i=this._vvMaterialParameters;if(i.vvOpacityEnabled=!1,i.vvSizeEnabled=!1,i.vvColorEnabled=!1,i.vvRotationEnabled=!1,!t)return;const s=t.size;if(s){if(i.vvSizeEnabled=!0,s.minMaxValue){const t=s.minMaxValue;let i,r;if(C(t.minSize)&&C(t.maxSize))if(P(t.minSize)&&P(t.maxSize))i=E(t.minSize),r=E(t.maxSize);else{const s=e.scale;i=E(G(s,t.minSize.stops)),r=E(G(s,t.maxSize.stops))}this.vvSizeMinMaxValue.set([t.minDataValue,t.maxDataValue,i,r])}if(s.scaleStops&&(this.vvSizeScaleStopsValue=E(G(e.scale,s.scaleStops.stops))),s.unitValue){const t=F(e.spatialReference)/R[s.unitValue.unit];this.vvSizeUnitValueToPixelsRatio=t/e.resolution}s.fieldStops&&(this._vvSizeFieldStops=s.fieldStops)}const r=t.color;r&&(i.vvColorEnabled=!0,this.vvColorValues.set(r.values),this.vvColors.set(r.colors));const a=t.opacity;a&&(i.vvOpacityEnabled=!0,this.vvOpacityValues.set(a.values),this.vvOpacities.set(a.opacities));const o=t.rotation;o&&(i.vvRotationEnabled=!0,i.vvRotationType=o.type)}_updateDotDensityInfo(t){const e=t.attributes;this.ddDotValue=t.dotValue,this.ddDotScale=t.referenceScale,this.ddDotSize=t.dotSize,this.ddDotBlending=t.dotBlendingEnabled,this.ddSeed=t.seed;for(let i=0;i<p;i++){const t=i>=e.length?new I([0,0,0,0]):e[i].color;J(this.ddColors,t,4*i)}for(let i=0;i<8;i++)this.ddActiveDots[i]=i<t.attributes.length?1:0;J(this.ddBackgroundColor,t.backgroundColor)}}class Y extends b{constructor(t){super(t),this._rendererInfo=new K,this._materialItemsRequestQueue=new O,this.attributeView=new Z((()=>this.onAttributeStoreUpdate()))}destroy(){this.removeAllChildren(),this.children.forEach((t=>t.destroy())),this.attributeView.destroy(),this._materialItemsRequestQueue.clear()}setRendererInfo(t,e,i){this._rendererInfo.setInfo(t,e,i),this.requestRender()}async getMaterialItems(t,e){if(!t||0===t.length)return null;const i=T();return this._materialItemsRequestQueue.push({items:t,abortOptions:e,resolver:i}),this.requestRender(),i.promise}doRender(t){if(t.context.capabilities.enable("textureFloat"),t.context.capabilities.enable("vao"),this._materialItemsRequestQueue.length>0){let e=this._materialItemsRequestQueue.pop();for(;e;)this._processMaterialItemRequest(t,e),e=this._materialItemsRequestQueue.pop()}super.doRender(t)}renderChildren(t){for(const e of this.children)e.commit(t);this._rendererInfo.update(t.state),super.renderChildren(t)}createRenderParams(t){return n=((t,e)=>{for(var i in e||(e={}))r.call(e,i)&&o(t,i,e[i]);if(s)for(var i of s(e))a.call(e,i)&&o(t,i,e[i]);return t})({},super.createRenderParams(t)),l={rendererInfo:this._rendererInfo,attributeView:this.attributeView},e(n,i(l));var n,l}onAttributeStoreUpdate(){}_processMaterialItemRequest(t,{items:e,abortOptions:i,resolver:s}){const{painter:r,pixelRatio:a}=t,o=e.map((t=>r.textureManager.rasterizeItem(t.symbol,a,t.glyphIds,i)));Promise.all(o).then((t=>{if(!this.stage)return void s.reject();const i=t.map(((t,i)=>({id:e[i].id,mosaicItem:t})));s.resolve(i)}),s.reject)}}export{Y as o,L as r};
